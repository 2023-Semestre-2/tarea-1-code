/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frontend;

import Backend.Utils;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Caili
 */
public class Principal extends javax.swing.JFrame {
    List<Map> file = new ArrayList();
    List<Map> temporal = new ArrayList();
    int cont;
    int IR = 0;
    
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(679, 389));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jPanel2.setBackground(new java.awt.Color(0, 51, 51));

        jButton1.setBackground(new java.awt.Color(52, 53, 65));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Open File");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(52, 53, 65));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Clean emulator");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setFocusPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(52, 53, 65));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Execute");
        jButton3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STATE", "CODE BIN", "AC", "AX", "BX", "CX", "DX", "PC", "IR"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(51, 51, 51));
        jTable1.setShowGrid(true);
        jScrollPane1.setViewportView(jTable1);

        jTable2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MEMORY", "CODE_ASM"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setGridColor(new java.awt.Color(51, 51, 51));
        jTable2.setSelectionBackground(new java.awt.Color(0, 255, 255));
        jTable2.setShowGrid(true);
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * 
     * @param evt 
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            String systemRoot = System.getProperty("user.dir");
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Seleccione el archivo que deseas ejecutar");
            File root = new File(systemRoot);
            fileChooser.setCurrentDirectory(root);

            // Filtra los tipos de archivos permitidos
            FileNameExtensionFilter filter = new FileNameExtensionFilter("ASM CODE", "asm");
            fileChooser.setFileFilter(filter);

            // Abre el explorador de archivos y espera a que el usuario seleccione un archivo
            int result = fileChooser.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                File archive = fileChooser.getSelectedFile();
                Utils model = new Utils();
                if (model.isCodeASM(archive.getPath()) == 0) {
                    file = model.result(archive.getPath());
                    Map<String, String> firstRow = new HashMap<>();
                    firstRow.put("STATE", "FETCHING");
                    firstRow.put("MEMORY", file.get(0).get("MEMORY").toString());
                    firstRow.put("CODE_ASM", file.get(0).get("CODE_ASM").toString());
                    firstRow.put("CODE_BINARY", file.get(0).get("CODE_BINARY").toString());
                    firstRow.put("AC","0");
                    firstRow.put("AX","0");
                    firstRow.put("BX","0");
                    firstRow.put("CX","0");
                    firstRow.put("DX","0");
                    firstRow.put("PC", file.get(0).get("MEMORY").toString());
                    firstRow.put("IR", file.get(0).get("CODE_BINARY").toString());
                    temporal.add(firstRow);
                    ShowMemory();
                    ShowData(temporal);
                }
                else {
                    String message = "ERROR DE SINTAXIS [DOCUMENTO INVALIDO]";
                    JOptionPane.showMessageDialog(new JFrame(), message, "ERROR",JOptionPane.ERROR_MESSAGE);
                }
                
                //ShowData(new Utils().result(archive.getPath()));  
            }
        } catch (Exception ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * 
     */
    public void nextInstruction() {
        if (cont<= file.size()-1) {
            Map<String, String> processing = new HashMap<>();
            if (IR%2 == 0) {
                processing.put("STATE", "EXECUTING");
                processing.put("MEMORY",file.get(cont).get("MEMORY").toString());
                processing.put("CODE_ASM", "---");
                processing.put("CODE_BINARY", "---");
                processing.put("AC",file.get(cont).get("AC").toString());
                processing.put("AX",file.get(cont).get("AX").toString());
                processing.put("BX",file.get(cont).get("BX").toString());
                processing.put("CX",file.get(cont).get("CX").toString());
                processing.put("DX",file.get(cont).get("DX").toString());
                if (cont+1<=file.size()-1) {
                    processing.put("PC", file.get(cont+1).get("MEMORY").toString());
                }
                else {
                    processing.put("PC", file.get(cont).get("MEMORY").toString());
                }

                processing.put("IR", file.get(cont).get("CODE_BINARY").toString());
                cont++;
            }
            else {
                processing.put("STATE", "FETCHING");
                processing.put("MEMORY",file.get(cont).get("MEMORY").toString());
                processing.put("CODE_ASM", file.get(cont).get("CODE_ASM").toString());
                processing.put("CODE_BINARY", file.get(cont).get("CODE_BINARY").toString());
                processing.put("AC",file.get(cont-1).get("AC").toString());
                processing.put("AX",file.get(cont-1).get("AX").toString());
                processing.put("BX",file.get(cont-1).get("BX").toString());
                processing.put("CX",file.get(cont-1).get("CX").toString());
                processing.put("DX",file.get(cont-1).get("DX").toString());
                processing.put("PC", file.get(cont).get("MEMORY").toString());
                processing.put("IR", file.get(cont).get("CODE_BINARY").toString());
            }
            IR++;
            temporal.add(processing);
            ShowData(temporal);
        }
        else {
            String message = "FIN DEL PROGRAMA";
            JOptionPane.showMessageDialog(new JFrame(), message, "WARNING",JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    /**
     * 
     */
    public void ShowMemory() {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        String[] cols = {"MEMORY","CODE ASM"};
        String[][] data = new String[file.size()][cols.length];
        for(int i = 0; i < file.size(); i++){
            Map obj = file.get(i);
            data[i][0] = obj.get("MEMORY").toString();
            data[i][1] = obj.get("CODE_ASM").toString();
        }
        model.setDataVector(data, cols);
    }
    
    /**
     * 
     * @param file 
     */
    public void ShowData(List<Map> file)
    {
       DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        String[] cols = {"STATE","CODE BIN","AC","AX","BX","CX","DX", "PC", "IR"};
        String[][] data = new String[file.size()][cols.length];

        for(int i = 0; i < file.size(); i++){
            Map obj = file.get(i);
            data[i][0] = obj.get("STATE").toString();
            data[i][1] = obj.get("CODE_BINARY").toString();
            data[i][2] = obj.get("AC").toString();
            data[i][3] = obj.get("AX").toString();
            data[i][4] = obj.get("BX").toString();
            data[i][5] = obj.get("CX").toString();
            data[i][6] = obj.get("DX").toString();
            data[i][7] = obj.get("PC").toString();
            data[i][8] = obj.get("IR").toString();
            
        }
        model.setDataVector(data, cols);
    }
    
    /**
     * 
     * @param evt 
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jTable1.clearSelection();
        jTable1.setModel(new DefaultTableModel());
        jTable2.clearSelection();
        jTable2.setModel(new DefaultTableModel());
        cont = 0;
        IR = 0;
        file = new ArrayList();
        temporal = new ArrayList();
    }//GEN-LAST:event_jButton2ActionPerformed
    /**
     * 
     * @param evt 
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        nextInstruction();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
